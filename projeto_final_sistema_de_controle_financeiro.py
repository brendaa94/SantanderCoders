# -*- coding: utf-8 -*-
"""Projeto Final - Sistema de Controle Financeiro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PWwEjg1Tjgb3aYzDQOEaJyvNYk-_Syhj

Deverá ser desenvolvido um sistema para controle financeiro que receba as movimentações e as armazena em um arquivo csv ou json.

O sistema deverá ser capaz de realizar as seguintes operações:

---
- Deem um nome criativo para a aplicação de vocês

# Projeto Final - Sistema de Controle Financeiro

## Popular Registro
"""

pip install Faker

from faker import Faker
from datetime import datetime, timedelta
import csv
import json

registros = [['id', 'Operação', 'Dia', 'Mês', 'Ano', 'Valor', 'Montante']]
id_counter = 0

# Popular Registros
for elemento in range(25):
    id_counter += 1
    fake = Faker()
    operacao = fake.random_element(elements=('Receita', 'Despesa', 'Investimento'))
    data = fake.date_between_dates(date_start=datetime(2023, 1, 1), date_end=datetime(2024, 12, 31))
    valor = fake.random_int(min = 0, max = 5000)
    if operacao == 'Despesa':
      valor = -abs(valor)
    novo_registro = [id_counter, operacao, data.strftime('%d'), data.strftime('%m'), data.strftime('%Y'), valor, 0.0]
    registros.append(novo_registro)

#Verificando a base de dados
for i in registros:
  print(i)

"""##Menu Inicial"""

#Função que inicializa o algoritimo
def sistema():
  menu = menu_principal()
  match menu:
    case '1':
      novo_registro()
    case '2':
      consultar()
    case '3':
      exportar_relatorio()
    case '4':
      agrupar()
    case '5':
      atualizar_registro()
    case '6':
      excluir_registro()
    case '7':
      print('\nObrigado por utilizar nosso sistema!')
    case _:
      print('\nEntrada Inválida!\n')
      sistema()

# Função que solicita ao usuário qual o tipo de operação fazer
def menu_principal():
    menu = input('''
======= Escolha a operação desejada =======

  [1] Cadastrar | [2] Consulta
  [3] Exportar  | [4] Consolidado
  [5] Atualizar | [6] Excluir
  [7] Sair

===========================================
    ''')
    return menu

"""## **Novos Registros**  
Criar novos registros e identificar a data que o registro foi feito, qual tipo de movimentação, valor.  

- Os tipos podem ser despesas, receita ou investimento:
  - No caso de receita, o valor deve ser tratado como numerico e armazenado normalmente.
  - no caso de despesas o valor deve ser recebido como positivo, mas armazenado como negativo
  - No caso de investimento, deve ter uma informação a mais de 'Montante', em que será calculado quanto o dinheiro rendeu desde o dia que foi investido. Para essa finalidade utilize a seguinte formula: $M = C * (1 + i)^t$ ([Saiba mais](https://matematicafinanceira.org/juros-compostos/)), considere tudo em dias.
"""

# Função que armazena as informações da movimentação no Banco de Dados
def novo_registro():
    data_dia, data_mes, data_ano, tipo, valor = insira_dados()
    atualiza_id_counter()
    match tipo:
        case ('Receita' | 'Investimento'):
            registros.append([id_counter, tipo, data_dia, data_mes, data_ano, valor, 0.0])
        case 'Despesa':
            registros.append([id_counter, tipo, data_dia, data_mes, data_ano, -abs(valor), 0.0])
    continuar()

def continuar():
    continua = input('Deseja continuar a cadastrar? (s/n)').lower()
    match continua:
        case 's':
            novo_registro()
        case 'n':
            sistema()
        case _:
            print('Entrada Inválida!')


# Fução que solicita as informações da Lançamento ao usuário
def insira_dados():
    tipo = receber_tipo()
    valor = receber_valor()
    data_dia, data_mes, data_ano = get_data()
    return data_dia, data_mes, data_ano, tipo, valor

def receber_valor():
  valor = float(input('Qual o valor da operação: R$ '))
  return valor


# Função que recebe e valida o tipo
def receber_tipo():
    while True:
        tipo = input('''
====== Informe o Tipo de Movimentação ======

               [1] Receita
               [2] Despesa
               [3] Investimento

============================================
      ''')
        match tipo:
            case '1':
                return 'Receita'
            case '2':
                return 'Despesa'
            case '3':
                return 'Investimento'
            case _:
                print('\nEntrada Inválida')


# Função que armazena o dia, mês e ano no instante do cadastro
def get_data():
    data_dia = datetime.now().strftime('%d')
    data_mes = datetime.now().strftime('%m')
    data_ano = datetime.now().strftime('%Y')
    return data_dia, data_mes, data_ano

# Função que incrementa o gerador de ID
def atualiza_id_counter():
      global id_counter
      id_counter += 1



"""## **Ler** registros:
Deverá ser possível consultar os registros por data, tipo ou valor.
Consulta de valor por intervalo
"""

# Função que inicializa o Menu de Consultas
def consultar():
  filtro = menu_consultar()
  match filtro:
    case '1':
      filtrar_data()
    case '2':
      filtrar_tipo()
    case '3':
      filtrar_valor()
    case '0':
      sistema()
    case _:
      print('\nEntrada Inválida')
      consultar()

# Função que solicita ao usuário o Parametro de pesquisa
def menu_consultar():
    tipo_filtro = input('''
=== Informe o Parametro a ser Pesquisado ===

               [1] Período
               [2] Tipo
               [3] Valor
               [0] Menu Inicial

============================================
''')
    return tipo_filtro

def continuar_consulta():
    continua = input('\nDeseja continuar consultando? (s/n)').lower()
    match continua:
        case 's':
            consultar()
        case 'n':
            sistema()
        case _:
            print('Entrada Inválida!')

"""###### **Filtro por Data**"""

# Função que executa a seleção dos lançamentos que estão dentro do intervalo selecionado
def filtrar_data():
    selecao = []
    selecao.append(registros[0])
    data_inicial, data_final = solicitar_periodo()
    for lancamento in registros[1:]:
        data_lancamento = montar_data(lancamento)
        if (datetime.strptime(data_inicial, "%d-%m-%Y")) <= (datetime.strptime(data_lancamento, "%d-%m-%Y")) <= (datetime.strptime(data_final, "%d-%m-%Y")):
          if lancamento[1] == 'Investimento':
            atualizar_rendimento(lancamento)
          selecao.append(lancamento)
    return imprimir_selecao(selecao)

# Função que solicita o intervalo de datas a ser pesquisado
def solicitar_periodo():
        data_inicial = input('Infomre a Data Inicial do Período (dd-mm-aaaa): ')
        validar_date(data_inicial)
        data_final = input('Infomre a Data Fnal do Período (dd-mm-aaaa): ')
        validar_date(data_final)
        data_inicial, data_final = validar_periodo(data_inicial, data_final)
        return data_inicial, data_final

#Função que valida se o período informado é coerente: Data Inicial < Data Final
def validar_periodo(data_inicial, data_final):
    if (datetime.strptime(data_inicial, "%d-%m-%Y")) <= (datetime.strptime(data_final, "%d-%m-%Y")):
        return data_inicial, data_final
    else:
        print('\nA data inicial não pode ser superior a data final.')
        filtrar_data()

# Função que valida datas
def validar_date(data):
    formato = '%d-%m-%Y'
    try:
        teste = bool(datetime.strptime(data, formato))
        if teste:
            return False
    except:
        print('\nData não existe ou está fora do fomrato solicitado!')
        filtrar_data()

# Função que recebe os dados de Dia, mês e Ano dos registros e concatena em uma string
def montar_data(lancamento):
    data_lancamento = lancamento[2] + '-' + lancamento[3] + '-' + lancamento[4]
    return data_lancamento

"""###### **Filtro por Tipo**"""

def filtrar_tipo():
  operacao = menu_tipo()
  match operacao:
    case '1':
      selecao = list(filter(buscar_receitas, registros))
      return imprimir_selecao(selecao)
    case '2':
      selecao = list(filter(buscar_despesas, registros))
      return imprimir_selecao(selecao)
    case '3':
      selecao = list(filter(buscar_investimentos, registros))
      return imprimir_selecao(selecao)
    case _:
      print('\nEntrada Inválida')

# Função que solicita o tipo de operação a ser filtrado ao usuário
def menu_tipo():
    operacao = input('''
== Qual o Tipo de Operação deseja filtrar ==

               [1] Receita
               [2] Despesa
               [3] Investimento

============================================
        ''')
    return operacao


# Função que itera no banco de dados e retorna as Movimentações de Receita
def buscar_receitas(lancamento):
    if lancamento[1] == 'Operação':
        return lancamento
    if lancamento[1] == 'Receita':
        return lancamento

# Função que itera no banco de dados e retorna as Movimentações de Despesas
def buscar_despesas(lancamento):
    if lancamento[1] == 'Operação':
        return lancamento
    if lancamento[1] == 'Despesa':
        return lancamento

# Função que itera no banco de dados e retorna as Movimentações de Investimentos
def buscar_investimentos(lancamento):
    if lancamento[1] == 'Operação':
        return lancamento
    if lancamento[1] == 'Investimento':
        lancamento = atualizar_rendimento(lancamento)
        return lancamento

"""###### Filtro por Valor"""

# Função que filtra os elementos dentro do intervalo de valor solicitado
def filtrar_valor():
    valor_minimo, valor_maximo = solicitar_valor()
    selecao = list([lancamento for lancamento in registros[1:] if valor_minimo <= lancamento[5] <= valor_maximo])
    for lancamento in selecao:
      if lancamento[1] == 'Investimento':
        atualizar_rendimento(lancamento)
    selecao.insert(0, registros[0])
    return imprimir_selecao(selecao)

# Função que solicita o intervalo de valores a ser pesquisado
def solicitar_valor():
    valor_minimo = float(input("Informe o valor mínimo do intervalo: "))
    valor_maximo = float(input("Informe o valor máximo do intervalo: "))
    return valor_minimo, valor_maximo

"""###### **Impressão da Consulta**"""

# Função que retorna a impressão da seleção dos dados
def imprimir_selecao(selecao):
    titulo_data = selecao[0][2] + '-' + selecao[0][3] + '-' + selecao[0][4]
    print(f('\n\n{selecao[0][0]:^5} {selecao[0][1]:^15} {titulo_data:^12} {selecao[0][5]:>15} {selecao[0][6]:>15}').uu)
    for item in selecao[1:]:
        if item[1] == 'Investimento':
            data = item[2] + '-' + item[3] + '-' + item[4]
            print(f'{item[0]:^5} {item[1]:^15} {data:^12} {float(item[5]):>15.2f} {float(item[6]):>15.2f}')
        else:
            data = item[2] + '-' + item[3] + '-' + item[4]
            print(f'{item[0]:^5} {item[1]:^15} {data:^12} {float(item[5]):>15.2f}')
    continuar_consulta()

"""## **Atualizar** registros:
No caso de atualização, pode-se atualizar o valor, o tipo e a data deverá ser a de atualização do registro.
"""

# Função de inicialização de atualização de registros
def atualizar_registro():
  operacao = menu_atualizar()
  match operacao:
    case '1':
      atualizar_lancamento()
    case '2':
      atualizar_montante()
    case '3':
      sistema()
    case _:
      print('\nEntrada Inválida')
      atualizar_registro

# Função do Submenu Atualizar
def menu_atualizar():
  operacao = input('''
========== Atualiza Registro por: ==========

               [1] Tipo e Valor
               [2] Montante
               [3] Menu Principal

============================================
        ''')
  return operacao

# Função que executa a atualização do registro
def atualizar_lancamento():
    indice = get_id()
    lancamento = registros[buscar_registro(indice)]
    lancamento[1] = receber_tipo()
    lancamento[5] = receber_valor()
    if (lancamento[1] == 'Despesa'):
      lancamento[5] = -abs(lancamento[5])
    lancamento[2], lancamento[3], lancamento[4] = get_data()
    if (lancamento[1] == 'Investimento'):
      atualizar_rendimento(lancamento)
    print('Lançamento atualizado com sucesso.')
    return

# Função que recebe o input do ID para atualizar
def get_id():
  try:
    id = int(input("Infomre o ID da operação que deseja atualizar: "))
  except:
    print('Entrada Inválida!')
    get_id()
  return id

# Função que busca o registro que será atualizado
def buscar_registro(id):
    indice = 1
    for lancamento in registros[1:]:
      if lancamento[0] == id:
        return indice
      else:
        indice += 1
    print(f'\nO ID nº {id} não foi encontrado.')
    atualizar_registro()

"""## **Deletar**:  
Deverá ser possível deletar o registro (caso necessário, considere o indice do elemento como ID)
"""

# Função de execussão da exclusao de registro
def excluir_registro():
    indice = get_id_excluir()
    lancamento = registros[buscar_registro_excluir(indice)]
    registros.remove(lancamento)
    print(f"\nRegistro com ID {indice} deletado com sucesso.")
    menu_principal()

# Função que localiza o registro a ser excluido
def buscar_registro_excluir(id):
    indice = 1
    for lancamento in registros[1:]:
      if lancamento[0] == id:
        return indice
      else:
        indice += 1
    print(f'\nO ID nº {id} não foi encontrado.')
    sistema()

# Função que recebe o input para exclusão de registro
def get_id_excluir():
  id = int(input("Qual registro deseja excluir?"))
  return id



"""## Crie uma função que atualize os valores de rendimento sempre que chamada"""

# Função que busca os lançamento de investimento e pede a atualização do Montante
def atualizar_montante():
    for lancamento in registros:
        if lancamento[1] == 'Investimento':
            atualizar_rendimento(lancamento)
    print('O montante das operações de investimentos foram atualizados.')
    return registros

# Função que executa a atualização do montante no lançamento
def atualizar_rendimento(lancamento):
    data_atual = datetime.now().strftime('%d-%m-%Y')
    data_cadastro = montar_data(lancamento)
    periodo = abs(datetime.strptime(data_atual, "%d-%m-%Y") - datetime.strptime(data_cadastro, "%d-%m-%Y"))
    lancamento[6] = round((float(lancamento[5]) * ((1 + 0.02)**periodo.days)), 2)
    return lancamento

"""## Crie uma função exportar_relatorio, que seja possível exportar um relatorio final em csv ou json."""

# Função de exportação de relatório
def exportar_relatorio():
    formato = menu_exportar()
    match formato:
      case '1':
        criar_CSV()
      case '2':
        criar_JSON()
      case '0':
        sistema()
      case _:
        print("Entrada inválida!")
        exportar_relatorio()

# Função que grava o arquivo CSV
def criar_CSV():
  with open('relatorio.csv', 'w') as arquivo_csv:
    for registro in registros:
      arquivo_csv.write(','.join(map(str, registro)) + '\n')
  print("\nRelatório exportado para 'relatorio.csv'.")
  sistema()

# Função que grava o arquivo JSON
def criar_JSON():
  dados = converter_dicionario()
  with open('relatorio.json', 'w') as arquivo_json:
    json.dump(converter_dicionario(), arquivo_json, indent=4, ensure_ascii=False)
  print("\nRelatório exportado para 'relatorio.json'.")
  sistema()

# Função que gera dicionários para o salvamento em arquivo JSON
def converter_dicionario():
  chaves = registros[0]
  relatorio_json = []
  for lancamento in registros[1:]:
    relatorio_json.append(dict(zip(chaves, lancamento)))
  return relatorio_json

# Função que apresenta o sub-menu da exportar e pede o input
def menu_exportar():
  formato = input('''
======== Informe o Tipo de Arquivo =========

               [1] CSV
               [2] JSON
               [0] Menu Inicial

============================================
''')
  return formato

"""## Crie pelo menos uma função de agrupamento, que seja capaz de mostrar o total de valor baseado em alguma informação (mes, tipo...)

"""

# Função que inicializa o agrupamento
def agrupar():
    formato = menu_agrupamento()
    match formato:
      case '1':
        agrupar_receitas()
      case '2':
        agrupar_despesas()
      case '3':
        agrupar_investimentos()
      case _:
        print("Entrada inválida!")
        exportar_relatorio()

# Função que recebe uma lista agrupada de Receitas e calcula o valor Total
def agrupar_receitas():
  selecao = list(filter(filtra_receitas, registros))
  soma = 0
  for lancamento in selecao:
    soma += lancamento[5]
  print(f"\nSão {len(selecao)} transações de Receita totalizando R$ {soma:.2f}.")
  sistema()

# Função que recebe uma lista agrupada de Despesas e calcula o valor Total
def agrupar_despesas():
  selecao = list(filter(filtra_despesas, registros))
  soma = 0
  for lancamento in selecao:
    soma += lancamento[5]
  print(f"\nSão {len(selecao)} transações de Despesa totalizando R$ {soma:.2f}.")
  sistema()

# Função que recebe uma lista agrupada de Investimentos e calcula o valor Total
def agrupar_investimentos():
  selecao = list(filter(filtra_investimentos, registros))
  soma = 0
  soma_montante = 0
  atualizar_montante()
  for lancamento in selecao:
    soma += lancamento[5]
    soma_montante += lancamento[6]
  print(f"\nSão {len(selecao)} transações de Investimentos totalizando R$ {soma:.2f} em valor e R$ {soma_montante} montante.")
  sistema()

# Função que cria lista agrupada de receitas
def filtra_receitas(lancamento):
  if lancamento[1] == 'Receita':
    return lancamento

# Função que cria lista agrupada de despesa
def filtra_despesas(lancamento):
  if lancamento[1] == 'Despesa':
    return lancamento

# Função que cria lista agrupada de investimentos
def filtra_investimentos(lancamento):
  if lancamento[1] == 'Investimento':
    return lancamento

# Função que apresenta o submenu de agrupamento
def menu_agrupamento():
  agrupar = input('''
=== Informe o Parametro a ser Pesquisado ===

               [1] Receitas
               [2] Despesas
               [3] Investimentos

============================================
''')
  return agrupar

"""# Teste de Mesa"""

sistema()